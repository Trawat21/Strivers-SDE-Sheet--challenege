ROTATE MATRIX
 class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n =matrix.size();
        for(int i=0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                swap(matrix[i][j], matrix[j][i]);
            }
        }
        for(int i=0;i<n;i++){
            reverse(matrix[i].begin(),matrix[i].end());
        }
    }
};

FIND THE DUPLICATE NUMBER

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow = nums[0];
        int fast = nums[0];
        do{
            slow = nums[slow];
            fast = nums[nums[fast]];
        }while(slow!=fast);
        fast = nums[0];
        while(slow!=fast){
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    }
};

MERGE 2 SORTED ARRAYS

#include <bits/stdc++.h>

void swapIfgreater(vector<int> arr1, vector<int> arr2,int ind1,int ind2){
    if(arr1[ind1]> arr2[ind2]){
        swap(arr1[ind1],arr2[ind2]);
    }
}

vector<int> ninjaAndSortedArrays(vector<int>& arr1, vector<int>& arr2, int m, int n) {
	int len = (m+n);
    int gap = (len/2) + (len%2);
    while(gap>0){
        int left =0;
        int right = left+gap;
        while(right<len){
            if(left <m && right >=m){
                swapIfgreater(arr1,arr2,left,right-m);
            }
            else if(left >=m){
                swapIfgreater(arr1,arr2,left-m,right-m);
            }
            else{
                swapIfgreater(arr1,arr2,left,right);
            }
            left++,right++;
        }
        if(gap ==1) break;
        gap = (gap/2) + (gap%2);
    }
    return arr1;









}
